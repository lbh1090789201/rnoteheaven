gem 'weixin_rails_middleware'
gem 'weixin_authorize', git: "https://github.com/lanrion/weixin_authorize.git"

前言: 微信公众平台与微信开发者平台是不同的,两者只有有少部分内容交叉
微信公众平台强调的是信息流,既可以向微博一向主要推送内容,也可以像10086一样根据用户的消息进行只能恢复或/
后台实现某些功能.还可以将用户引向HTML5页面.也就仅此而已.引导到HTML5页面之后,除了能够通过授权给网页
获取用户的基本信息之外,其他逻辑处理,第三方登录之类的内容就是属于微信开发者平台的范围.
微信开放平台主要面向app开发者和网页开发者,通常是第三方登录功能,和图片分享

对　微信公众号进行配置与管理　需要　在微信公众号的基本配置中启用服务器配置
URL(服务器地址)配置为：微信公众号控制平台项目的部署地址＋/token(令牌)＋/AppSecret(微信公众平台－基本配置－AppSecret(应用密匙))

 1. 到公众平台上面去申请,验证,再认证,确保拥有接口权限之后在开发/基本配置里面配置服务器,服务器首先需要部署到外网上面.
 URL服务器地址由weixin_rails_middleware框架生成,即: http://域名/weixin/ENV["APPSECRET"]
 Token:为自定义,保证与服务器的token相等

1.第一个Gem是实现基本的常用接口(token认证开发,消息回复,自动回复),第二个实现高级接口(自定义菜单,图文素材和网页授权获取用户信息)
    bundle install 之后执行 rails generate weixin_rails_middleware:install
    config/initializers/weixin_rails_middleware.rb
    app/controllers/decorators/controllers/weixin_rails_middleware/weixin_controller_decorator.rb
    在weixin_rails_middleware.rb设置如下,三个属性,具体数值需要参考微信公众帐号
    config.weixin_token_string = 'echotest'
    config.weixin_secret_string = 'd4624c36b6795d1d99dcf0547af5443d'
    config.app_id = "wxb107a27b0077db56"

 3. weixin_authorize首先在config/application.rb里面初始化一个客户端,同时需要初始化appid,appsecret的全局变量,同样,具体数值需要
 查看公众帐号
      ENV["APPID"]="wxb107a27b0077db56"
     ENV["APPSECRET"]="d4624c36b6795d1d99dcf0547af5443d"
     $client ||= WeixinAuthorize::Client.new(ENV["APPID"], ENV["APPSECRET"])
 4. weixin_controller_decorator.rb中
    response_#{@weixin_message.MsgType}_message就是根据发送信息的类型(MsgType)调用对应的方法
    handle_#{event_type.downcase}_event 对应的方法是关注微信,取消关注微信,拍二维码,菜单点击回调,菜单连接
 5. weixin_authorize框架在初始化之后,只需要项在相应的地方条用接口即可
    具体见:
    这是网页授权进入登录
    redirect_to $client.authorize_url('http://hf.roadclouding.com/show',"snsapi_userinfo")
    回调之后获取用户的信息
    sns_info = $client.get_oauth_access_token(params[:code])
    @user_info = $client.get_oauth_userinfo(sns_info.result["openid"], sns_info.result["access_token"])
    注:所有的返回结果都被转化成了下面的接口
    {
        code   #全局返回码 http://mp.weixin.qq.com/wiki/10/6380dc743053a91c544ffd2b7c959166.html
        cn_msg #返回码对应的中文说明
        en_msg #返回码对应的英文
        result #返回的结果,已经被转换成了一个字典,通过文档的说明获取信息
    }
 6. 自定义接口说明
     def http_get(url, url_params={}, endpoint="plain")
     def http_post(url, post_body={}, url_params={}, endpoint="plain")
     endpoint 的作用就是识别上传类型,拼接url,在默认的情况下会生成:https://api.weixin.qq.com/cgi-bin
     比如说upload_media上传文件,调用post方法如下:
     # http://file.api.weixin.qq.com/cgi-bin/media/upload?access_token=ACCESS_TOKEN&type=TYPE
     http_post(/media/uploads, {media: file}, {type: media_type}, "file")
     通过传入file而将域名识别为http://file.api.weixin.qq.com/cgi-bin/
     所以同理,同时,如果若微信的api接口发生变化之后,我们可能还需要在weixin_authorize.rb里面添加新的方法,生成对应的域名
     例如:
     # https://api.weixin.qq.com/cgi-bin/material/add_material?access_token=ACCESS_TOKEN
     添加永久素材,在weixin_authroize.rb下添加如下方法
     def material_endpoint
           "#{api_endpoint}/cgi-bin"
     end
     最终转换成 https://api.weixin.qq.com/cgi-bin
     在media.rb文件中
       def upload_forever_material(media, media_type,file_name)
          file = process_file(media)
          upload_media_url = "#{material_base_url}/add_material"
          http_post(upload_media_url, {media: file}, {type: media_type},'material')
       end
     此方法的拼接的链接为:material/add_news,通过第三个参数,material,最终生成了正确的网络接口

